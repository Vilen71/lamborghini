//?============================== - Mixins - ==============================//

@function prc($pxOne,$pxTwo) {
  $result: math.div($pxOne,$pxTwo) * 100%;
  @return $result;
}

@function rem($px) {
  $result: math.div($px,16) + rem;
  @return $result;
}

@function em($pxOne,$pxTwo:16) {
  $result: math.div($pxOne,$pxTwo) + em;  
  @return $result;
}

@function lh($pxOne,$pxTwo) {
  $result: math.div($pxOne,$pxTwo);  
  @return $result;
}

//?============================== - Functions - ==============================//

@mixin AdaptiveValue($property,$startSize,$minSize,$widthFrom: $maxWidthContainer,$widthTo: 320,$type: 1) {
 $addSize: $startSize - $minSize;
  @if $type == 1 {
    #{$property}: $startSize + px;
    @media (max-width: #{$widthFrom + px}) {   
      #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - #{$widthTo + px}) / #{$widthFrom - $widthTo}));
    }
    @media (max-width: #{$widthTo + px}) {
     #{$property}: #{$minSize + px};
    }
  }
  @else if $type == 2 {
    #{$property}: $startSize + px;
    @media (min-width: #{$widthFrom + px}) {
      #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - #{$widthTo + px}) / #{$widthFrom - $widthTo}));
    }
    @media (max-width: #{$widthTo + px}) {
     #{$property}: #{$minSize + px};
    }
  }
  @else {
    #{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - #{$widthTo + px}) / #{$maxWidth - $widthTo}));
  }
};